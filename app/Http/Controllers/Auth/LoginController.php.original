<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Lang;

class LoginController extends Controller {
    /*
      |--------------------------------------------------------------------------
      | Login Controller
      |--------------------------------------------------------------------------
      |
      | This controller handles authenticating users for the application and
      | redirecting them to your home screen. The controller uses a trait
      | to conveniently provide its functionality to your applications.
      |
     */

    use AuthenticatesUsers;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct() {
        $this->middleware('guest')->except('logout');
    }

//    public function authenticate(){
//        if (Auth::attempt(['email' => $email, 'password' => $password])) {
//            // Authentication passed...
//            return redirect()->intended('dashboard');
//        }
//    }

    protected function redirectTo() {
        $redirectTo = "/";
        $user = Auth::user();

        switch ($user->getType()) {
            case User::TYPE_USER_ADMIN_PRO:
            case User::TYPE_USER_PRO:
                $redirectTo = "/admin";
                break;
        }

        return $redirectTo;
    }

    protected function sendLoginResponse(Request $request) {
        $request->session()->regenerate();
        $this->clearLoginAttempts($request);
        if ($request->ajax()) {
            return response()->json(['success' => 1], 200);
        }
        return $this->authenticated($request, $this->guard()->user()) ?: redirect()->intended($this->redirectPath());
    }

    protected function sendFailedLoginResponse(Request $request) {
        if ($request->ajax()) {
            return response()->json([
                        'error' => Lang::get('auth.failed')
                            ], 401);
        }
        return redirect()->back()
                        ->withInput($request->only($this->username(), 'remember'))
                        ->withErrors([
                            $this->username() => Lang::get('auth.failed'),
        ]);
    }

    /**
     * @param Request $request
     *
     * @return JsonResponse|RedirectResponse
     */
    public function login(Request $request) {
        $this->validateLogin($request);

        if ($this->hasTooManyLoginAttempts($request)) {
            $this->fireLockoutEvent($request);

            return $this->sendLockoutResponse($request);
        }

        if ($this->attemptLogin($request)) {
            $user = Auth::user();

            if ($user->active) {
                return response()->json(['user' => $user]);
            } else {
                return response()->redirectTo($this->redirectPath());
            }

            $this->guard()->logout();
            $request->session()->invalidate();
        }

        $this->incrementLoginAttempts($request);

        return $this->sendFailedLoginResponse($request);
    }

    /**
     * The user has been authenticated.
     *
     * @param  Request  $request
     * @param  mixed  $user
     * @return mixed
     */
    protected function authenticated(Request $request, $user) {
        if ($request->expectsJson()) {
            return response()->json([
                        'user' => $user,
                        'intended' => $this->redirectPath(),
            ]);
        }

        Session::flash('status', [
            'title' => trans('aktiv8me.status.login'),
            'message' => trans('aktiv8me.status.logged_in', ['username' => $user->name]),
            'type' => 'success',
        ]);
    }

}
